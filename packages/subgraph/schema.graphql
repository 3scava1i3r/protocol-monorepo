#################
# Event Entities #
#################
interface Event {
    id: ID!
    blockNumber: BigInt!
    timestamp: BigInt!
    transactionHash: Bytes!
}

enum FlowActionType {
    create
    update
    terminate
}

#     ConstantFlowAgreementV1    #
type FlowUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    sender: Bytes!
    receiver: Bytes!
    flowRate: BigInt!
    totalSenderFlowRate: BigInt!
    totalReceiverFlowRate: BigInt!
    userData: Bytes!
    # Custom Properties (not on event)
    oldFlowRate: BigInt!
    type: FlowActionType
}

#  InstantDistributionAgreementV1 #
type IndexCreated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!
}

type IndexUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    publisher: Bytes!
    indexId: BigInt!
    oldIndexValue: BigInt!
    newIndexValue: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsApproved: BigInt!
    userData: Bytes!
}

type SubscriptionApproved implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!
}

type SubscriptionRevoked implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    userData: Bytes!
}

type SubscriptionUnitsUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    subscriber: Bytes!
    publisher: Bytes!
    indexId: BigInt!
    units: BigInt!
    userData: Bytes!
}

#     Superfluid    #
type GovernanceReplaced implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    oldGovernance: Bytes!
    newGovernance: Bytes!
}

type AgreementClassRegistered implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type AgreementClassUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    agreementType: Bytes!
    code: Bytes!
}

type SuperTokenFactoryUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    newFactory: Bytes!
}

type SuperTokenLogicUpdated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Bytes!
    code: Bytes!
}

type AppRegistered implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    app: Bytes!
}

type Jail implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    app: Bytes!
    reason: BigInt!
}

# #     SuperfluidGovernance    #
type ConfigChanged implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    key: Bytes!
    set: Boolean!
    value: BigInt!
}

type RewardAddressChanged implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    set: Boolean!
    rewardAddress: Bytes!
}

type CFAv1LiquidationPeriodChanged implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    set: Boolean!
    liquidationPeriod: BigInt!
}

type TrustedForwarderChanged implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    host: Bytes!
    superToken: Bytes!
    set: Boolean!
    forwarder: Bytes!
    enabled: Boolean!
}

#     SuperToken    #
type AgreementLiquidatedBy implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    liquidatorAccount: Bytes!
    agreementClass: Bytes!
    agreementId: Bytes!
    penaltyAccount: Bytes!
    bondAccount: Bytes!
    rewardAmount: BigInt!
    bailoutAmount: BigInt!
}

type TokenUpgraded implements Event @entity {
    id: ID!
    account: Bytes!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    amount: BigInt!
}

type TokenDowngraded implements Event @entity {
    id: ID!
    account: Bytes!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
    amount: BigInt!
}

type Transfer implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    from: Bytes!
    to: Bytes!
    value: BigInt!
    token: Token!
}

#     SuperTokenFactory    #
type SuperTokenCreated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
}

type SuperTokenLogicCreated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
}

type CustomSuperTokenCreated implements Event @entity {
    id: ID!
    transactionHash: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    token: Token!
}

####################
#   HOL Entities   #
####################
# State is defined as properties that will change outside
# of the BaseEntity properties.
# Links is defined as a property which links the current
# entity to another HOL entity.
interface BaseEntity {
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
}
# Note: Make sure to implement BaseEntity
type Account implements BaseEntity @entity {
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
}

type Token implements BaseEntity @entity {
    # Note: All Tokens are Super Tokens for this subgraph
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
    name: String!
    symbol: String!
    underlyingAddress: Bytes! # Underlying ERC20
}

type Stream implements BaseEntity @entity {
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
    # ---------------------------------- state ----------------------------------
    currentFlowRate: BigInt!
    streamedUntilUpdatedAt: BigInt!
    # ---------------------------------- links ----------------------------------
    token: Token!
    sender: Account!
    receiver: Account!
}

type Subscriber implements BaseEntity @entity {
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
    token: Token!
    subscriber: Account!
    publisher: Account!
    indexId: BigInt!
    userData: Bytes!
    # ---------------------------------- state ----------------------------------
    approved: Boolean!
    units: BigInt!
    totalUnitsReceivedUntilUpdatedAt: BigInt!
    totalUnitsPendingApproval: BigInt!
    lastIndexValue: BigInt! # used to calculate the "totalFundsSent"
    # ---------------------------------- links ----------------------------------
    index: Index!
}

type Index implements BaseEntity @entity {
    id: ID!
    createdAt: BigInt!
    updatedAt: BigInt!
    indexId: BigInt!
    # ---------------------------------- state ----------------------------------
    userData: Bytes!
    oldIndexValue: BigInt!
    newIndexValue: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsApproved: BigInt!
    totalUnits: BigInt!
    totalUnitsDistributed: BigInt!
    # ---------------------------------- links ----------------------------------
    token: Token!
    publisher: Account!
}

####################
#  Helper Entities #
####################
type StreamRevision @entity {
    id: ID!
    revisionIndex: Int!
}

####################
#  Aggr. Entities  #
####################
type AccountTokenSnapshot @entity {
    id: ID!
    # ---------------------------------- state ----------------------------------
    balance: BigInt! # must be updated each time subscription units is updated
    totalNumberOfStreams: BigInt!
    totalNetFlowRate: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsReceived: BigInt!
    totalSubscriptions: BigInt!
    totalApprovedSubscriptions: BigInt!
    # ---------------------------------- links ----------------------------------
    account: Account!
    token: Token!
}

type TokenStats @entity {
    id: ID!
    # ---------------------------------- state ----------------------------------
    totalNumberOfStreams: BigInt!
    totalOutflowRate: BigInt!
    totalNumberOfIndexes: BigInt!
    totalUnitsPending: BigInt!
    totalUnitsApproved: BigInt!
    totalUnitsDistributed: BigInt!
    totalSubscribers: BigInt!
    totalApprovedSubscribers: BigInt!
    # ---------------------------------- links ----------------------------------
    token: Token!
}
